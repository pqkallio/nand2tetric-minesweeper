class Cell {
	field int mX;
	field int mY;
	field boolean mMine;
	field boolean mOpen;
	field boolean mSelected;
	field boolean mFlagged;
	field int mNeighborMines;

	constructor Cell new(int x, int y) {
		let mX = x;
		let mY = y;
		let mMine = false;
		let mOpen = false;
		let mSelected = false;
		let mNeighborMines = 0;

		return this;
	}

	method void dispose() {
		do Memory.deAlloc(this);
		return;
	}

	method void setHasMine(boolean mine) {
		let mMine = mine;
		return;
	}

	method boolean hasMine() {
		return mMine;
	}

	method boolean isFlagged() {
		return mFlagged;
	}

	method int getNeighborMines() {
		return mNeighborMines;
	}

	method void addNeighborMines(int n) {
		let mNeighborMines = (mNeighborMines + n);
		return;
	}

	method void setSelected(bool isSelected) {
		let mSelected = isSelected;
		return;
	}

	method int getX() {
		return mX;
	}

	method int getY() {
		return mY;
	}

	method void setX(int x) {
		let mX = x;
		return;
	}

	method void setY(int y) {
		let mY = y;
		return;
	}

	method void toggleFlagged() {
		let mFlagged = ~mFlagged;
		return;
	}

	method void open() {
		let mOpen = true;
		return;
	}

	method boolean isOpen() {
		return mOpen;
	}

	method void draw() {
		var int y;

		let y = mY + 1;

		if (mFlagged) {
			if (mOpen & (~mMine)) {
				do SpriteRenderer.drawCross(mX, y);
				do SpriteRenderer.drawBorder(mX, y, mSelected);

				return;
			}

			do SpriteRenderer.drawFlag(mX, y);
			do SpriteRenderer.drawBorder(mX, y, mSelected);

			return;
		}

		if (~(mOpen)) {
			do SpriteRenderer.drawClosed(mX, y);
			do SpriteRenderer.drawBorder(mX, y, mSelected);

			return;
		}

		if (mMine) {
			do SpriteRenderer.drawMine(mX, y);
			do SpriteRenderer.drawBorder(mX, y, mSelected);

			return;
		}

		if (mNeighborMines = 0) {
			do SpriteRenderer.drawEmpty(mX, y);
			do SpriteRenderer.drawBorder(mX, y, mSelected);

			return;
		}

		do SpriteRenderer.drawNumber(mX, y, mNeighborMines);
		do SpriteRenderer.drawBorder(mX, y, mSelected);

		return;
	}
}