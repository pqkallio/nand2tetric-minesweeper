class GameField {
	field Array mField;
	field Random mRand;
	field int mMines;
	field int WIDTH;
	field int HEIGHT;
	field Coord2D mSelected;

	constructor GameField new(Random rand, int mines) {
		let WIDTH = 32;
		let HEIGHT = 16;
		let mRand = rand;
		let mMines = mines;
		let mSelected = Coord2D.new(0, 0);

		do constructField();

		return this;
	}

	method void dispose() {
		do mField.dispose();
		do mSelected.dispose();

		do Memory.deAlloc(this);

		return;
	}

	method void selectCellAtLoc(int x, int y) {
		var Cell cell;
		var Array row;

		// TODO: refactor
		let row = mField[mSelected.getY()];
		let cell = row[mSelected.getX()];

		do cell.setSelected(false);
		do cell.draw();

		let row = mField[y];
		let cell = row[x];

		do cell.setSelected(true);
		do cell.draw();
		// end TODO

		do mSelected.setX(x);
		do mSelected.setY(y);

		return;
	}

	method void constructField() {
		var int i;
		var int j;
		var int len;
		var Array row;
		var int x, y;
		var Cell cell;
		var int total;
		var int x1, y1;
		var int x2, y2;
		var int r1, r2;
		var Cell c1, c2;

		let mField = Array.new(HEIGHT);
		let i = 0;
		let total = 0;

		while (i < HEIGHT) {
			let mField[i] = Array.new(WIDTH);
			let row = mField[i];
			let j = 0;

			while (j < WIDTH) {
				let cell = Cell.new(j, i);

				if (total < mMines) {
					do cell.setHasMine(true);
				}

				let row[j] = cell;

				let j = j + 1;
				let total = total + 1;
			}

			let i = i + 1;
		}

		let len = WIDTH * HEIGHT;

		let i = len - 1;
		while (i > 0) {
			let r1 = ExtMath.modulo(mRand.getNext(), i + 1);

			let y1 = r1 / WIDTH;
			let x1 = r1 - (y1 * WIDTH);

			let y2 = i / WIDTH;
			let x2 = i - (y2 * WIDTH);

			let row = mField[y1];
			let c1 = row[x1];

			let row = mField[y2];
			let c2 = row[x2];

			let x = c1.getX();
			let y = c1.getY();

			do c1.setX(c2.getX());
			do c1.setY(c2.getY());

			do c2.setX(x);
			do c2.setY(y);

			let row = mField[y1];
			let row[x1] = c2;

			let row = mField[y2];
			let row[x2] = c1;

			let i = i - 1;
		}

		let i = 0;

		while (i < HEIGHT) {
			let j = 0;

			while (j < WIDTH) {
				let row = mField[i];
				let cell = row[j];

				if (cell.hasMine()) {
					do updateNeighbors(j, i);
				}

				let j = j + 1;
			}

			let i = i + 1;
		}

		do selectCellAtLoc(WIDTH / 2, HEIGHT / 2);

		return;
	}

	method boolean insideField(int x, int y) {
		if ((x < 0) | (x > 31)) {
			return false;
		}

		if ((y < 0) | (y > 15)) {
			return false;
		}

		return true;
	}

	method void updateNeighbors(int x, int y) {
		var Cell cell;
		var Array row;
		var int i;
		var int j;
		var int origX;
		var int origY; 
		var boolean isInsider;
		var boolean isOther;

		let origY = y;
		let origX = x;

		let i = origY - 1;

		while (i < (origY + 2)) {
			let j = origX - 1;

			while (j < (origX + 2)) {
				let isInsider = insideField(j, i);
				let isOther = (~(j = origX)) | (~(i = origY));

				if (isInsider & isOther) {
					let row = mField[i];
					let cell = row[j];
				
					do cell.addNeighborMines(1);
				}

				let j = j + 1;
			}

			let i = i + 1;
		}
		
		return;
	}

	method void open() {
		var Array row;
		var Cell cell;

		let row = mField[mSelected.getY()];
		let cell = row[mSelected.getX()];

		do cell.open();
		do cell.draw();

		return;
	}

	method void flag() {
		var Array row;
		var Cell cell;

		let row = mField[mSelected.getY()];
		let cell = row[mSelected.getX()];

		do cell.toggleFlagged();
		do cell.draw();

		return;
	}

	method void up() {
		var int y;

		let y = mSelected.getY() - 1;

		if (y > -1) {
			do selectCellAtLoc(mSelected.getX(), y);
		}

		return;
	}

	method void down() {
		var int y;

		let y = mSelected.getY() + 1;

		if (y < HEIGHT) {
			do selectCellAtLoc(mSelected.getX(), y);
		}

		return;
	}

	method void left() {
		var int x;

		let x = mSelected.getX() - 1;

		if (x > -1) {
			do selectCellAtLoc(x, mSelected.getY());
		}

		return;
	}

	method void right() {
		var int x;

		let x = mSelected.getX() + 1;

		if (x < WIDTH) {
			do selectCellAtLoc(x, mSelected.getY());
		}

		return;
	}

	method void draw() {
		var Cell cell;
		var Array row;
		var int i;
		var int j;

		let i = 0;

		while (i < HEIGHT) {
			let row = mField[i];
			let j = 0;

			while (j < WIDTH) {
				let cell = row[j];
				do cell.draw();

				let j = j + 1;
			}

			let i = i + 1;
		}

		return;
	}
}